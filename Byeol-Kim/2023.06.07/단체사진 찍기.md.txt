## 문제 설명
> <a href="https://school.programmers.co.kr/learn/courses/30/lessons/1835#qna"> 단체사진 찍기</a>

각자가 원하는 배치를 모두 만족하는 경우의 수를 구하는 문제입니다.
- n과 n개의 원소로 구성된 문자열 배열 data가 주어지며
- data의 원소는 N~F=0 형태의 문자열입니다.
- data의 원소의 조건
   - 다섯글자
   - 첫번째(제시), 세번째(상대방) : {A, C, F, J, M, N, R, T} 
   - 두번째 : ~
   - 네번째 : {=, <, >}
   - 다섯번째 : 0 ~ 6이하 정수= 두 프렌즈 사이에 있는 다른 프렌즈의 수 


## 접근 방법

- DFS를 이용하여 만들 수 있는 모든 단체 사진 배치도를 만들었습니다.
   - 한 번 등장한 프렌즈는 다시 등장하지 않도록 검사하는 조건문을 넣었습니다. (StringBuilder에 존재하는지 체크하는 indexOf 메서드)
   - 백트래킹을 이용하여 모든 경우의 수를 구합니다.
- 그 배치도의 길이가 8이 되면 모든 프렌즈들은 배치도에 등장하게 되어 DFS의 재귀호출을 멈춥니다.
   - data라는 조건문을 모두 만족해야 하므로 조건문을 모두 만족하도록 boolean으로 검사하는 메서드를 만들어 분리했습니다.
  
## 나의 풀이
```java
class Solution {

    static String[] friends = {"A", "C", "F", "J", "M", "N", "R", "T"};
    static String[] dataStatic;

    static int length;
    static int cnt;

    public int solution(int n, String[] data) {
        int answer = 0;
        dataStatic = data;
        length = n;
        cnt=0;
        
        
        //각자가 원하는 배치를 모두 만족하는 경우의 수를 모두 구하는
        //n과 n개의 원소로 구성된 문자열 배열 data : N~F=0 형태의 문자열
        // data의 원소
        // - 다섯글자
        // - 첫번째(제시), 세번째(상대방) : {A, C, F, J, M, N, R, T} '
        // - 두번째 : ~
        // - 네번째 : {=, <, >}
        // - 다섯번째 : 0 ~ 6이하 정수= 두 프렌즈 사이에 있는 다른 프렌즈의 수
        
        dfs (0,new StringBuilder());
     
        
        return cnt;
    }

    static void dfs(int level, StringBuilder sb) {
        if( level == 8) {

            // data에 주어진 모든 조건을 충족하는 한다면
            if( check( sb.toString() ) ) {
                cnt++ ;
            }
            return ;


        } else {
            for ( int i = 0 ; i < 8 ; i++ ) {
                // 현재 배치도에 등장하지 않는 프렌즈라면 dfs 진행
                if( sb.indexOf(friends[i]) == -1 ) {
                    sb.append(friends[i]);
                    dfs(level+1,sb);
                    // 백트래킹을 이용하여 모든 경우의 수를 만든다.
                    sb.deleteCharAt(sb.length() - 1);
                }
            }
        }
    }

    static boolean check( String batch ){

        for( int i = 0 ; i < length ; i++ ) {

            String want = dataStatic[i];
            char me = want.charAt(0);
            char you = want.charAt(2);

            char comp = want.charAt(3);
            int interval = want.charAt(4)-'0';

            //지금 배치도에서의 간격구하기
            int batchInterval = batch.indexOf(me)-batch.indexOf(you);
            batchInterval = batchInterval > 0 ?  batchInterval-1 :  (batchInterval*-1)-1;

            //충족여부
            boolean tag = false;

            switch(comp){
                case '=':
                    if(batchInterval==interval) tag=true;
                    break;
                case '>':
                    if(batchInterval>interval) tag=true;
                    break;
                default:
                    if(batchInterval<interval) tag=true;
                    break;
            } //switch

            //하나라도 충족하지 않으면 바로 false를 반환하고 나가기
            if(!tag){
                return false;
            }
        }//for
        return true;
    }
}
```